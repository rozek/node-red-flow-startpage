[
    {
        "id": "afba2d2e4419bca8",
        "type": "comment",
        "z": "b51de224d58a5b6a",
        "name": "Startpage.com",
        "info": "",
        "x": 100,
        "y": 100,
        "wires": []
    },
    {
        "id": "39eee98371891a8b",
        "type": "reusable-in",
        "z": "b51de224d58a5b6a",
        "name": "Startpage.com",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "66ab4fe99b21f227"
            ]
        ]
    },
    {
        "id": "f34f28fb6e23fdae",
        "type": "reusable-out",
        "z": "b51de224d58a5b6a",
        "name": "success",
        "position": 1,
        "x": 440,
        "y": 160,
        "wires": []
    },
    {
        "id": "66ab4fe99b21f227",
        "type": "function",
        "z": "b51de224d58a5b6a",
        "name": "run search",
        "func": "(async () => {\n  let SearchString = (msg.payload || '').trim()\n  if (SearchString === '') {\n    msg.payload = 'empty or missing search string'\n    node.send([null,msg])\n    return\n  }\n\n/**** retrieve settings or provide defaults ****/\n\n  let Language = (msg.language || '').trim()\n  switch (Language) {\n    case '':\n      Language = 'english'\n      break\n    case 'deutsch':\n    case 'english':\n      break\n    default:\n      msg.payload = 'invalid msg.language given'\n      node.send([null,msg])\n      return\n  }\n\n/**** extract actual results from command output ****/\n\n  function ResultsFrom (Response, Language) {\n    let Findings = []\n      let currentURL         = ''\n      let currentTitle       = ''\n      let currentDescription = ''\n\n      let nestLevel = 0\n\n      let withinFinding     = false, FindingLevel     = 0\n      let withinTitle       = false, TitleLevel       = 0\n      let withinDescription = false, DescriptionLevel = 0\n\n      function processStartTag (TagName, Attributes, isUnary, isTopLevel) {\n        switch (true) {\n          case (\n            ! withinFinding && (TagName === 'div') &&\n            (AttributeFrom('class',Attributes) === 'w-gl__result-second-line-container')\n          ):\n            withinFinding = true; FindingLevel = nestLevel\n            currentURL = currentTitle = currentDescription = ''\n            break\n          case (\n            withinFinding && (TagName === 'a') &&\n            (AttributeFrom('class',Attributes) === 'w-gl__result-title result-link')\n          ):\n            currentURL = AttributeFrom('href',Attributes)\n            break\n          case (\n            withinFinding && (TagName === 'h3') &&\n            (nestLevel === FindingLevel+1)\n          ):\n            withinTitle = true; TitleLevel = nestLevel\n            currentTitle = ''\n            break\n          case (\n            (TagName === 'p') &&\n            (AttributeFrom('class',Attributes) === 'w-gl__description')\n          ):\n            withinDescription = true; DescriptionLevel = nestLevel\n            currentDescription = ''\n        }\n\n        nestLevel += 1\n      }\n\n      function processEndTag (TagName, isTopLevel) {\n        nestLevel -= 1\n\n        switch (true) {\n          case (\n            withinFinding && (TagName === 'div') &&\n            (nestLevel === FindingLevel)\n          ):\n            withinFinding = false\n            Findings.push({\n              URL:        currentURL,\n              Title:      currentTitle,\n              Description:currentDescription\n            })\n            break\n          case (\n            withinTitle && (TagName === 'h3') &&\n            (nestLevel === TitleLevel)\n          ):\n            withinTitle = false\n            break\n          case (\n            withinDescription && (TagName === 'p') &&\n            (nestLevel === DescriptionLevel)\n          ):\n            withinDescription = false\n\n            let Match\n            switch (Language) {\n              case 'deutsch':\n                Match = /^(\\d+)[.](\\d+)[.](\\d{4})\\s[.]{3}\\s(.+)$/.exec(currentDescription)\n                if (Match == null) {\n                  Findings[Findings.length-1].Description = currentDescription\n                } else {\n                  Findings[Findings.length-1].Date = (new Date(\n                    Match[2] + '.' + Match[1] + '.' + Match[3]\n                  )).getTime()\n                  Findings[Findings.length-1].Description = Match[4].trim()\n                }\n                break\n              case 'english':\n                Match = /^(\\d+\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s\\d{4})\\s[.]{3}\\s(.+)$/.exec(currentDescription)\n                if (Match == null) {\n                  Findings[Findings.length-1].Description = currentDescription\n                } else {\n                  Findings[Findings.length-1].Date        = (new Date(Match[1])).getTime()\n                  Findings[Findings.length-1].Description = Match[3].trim()\n                }\n                break\n              default:\n                Findings[Findings.length-1].Description = currentDescription\n            }\n            break\n        }\n      }\n\n      function processText (Text, isTopLevel) {\n        switch (true) {\n          case withinTitle:       currentTitle       += Text; break\n          case withinDescription: currentDescription += Text; break\n        }\n      }\n\n      parseHTML(Response, { processStartTag, processEndTag, processText })\n    return Findings\n  }\n\n//----------------------------------------------------------------------------//\n//                                HTML Parsing                                //\n//----------------------------------------------------------------------------//\n\n  function parseHTML (HTML, Callbacks) {\n    const StartTagPattern  = /^<([-a-z0-9]+)((?:[\\s\\xA0]+[-a-z0-9_]+(?:[\\s\\xA0]*=[\\s\\xA0]*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s\\xA0]+))?)*)[\\s\\xA0]*(\\/?)>/i\n    const EndTagPattern    = /^<\\/([-a-z0-9_]+)[^>]*>/i\n    const AttributePattern = /([-a-z0-9]+)(?:[\\s\\xA0]*=[\\s\\xA0]*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s\\xA0]+)))?/gi\n\n  /**** MapOf makes a \"map\" with keys from a given comma-separated key list ****/\n\n    function MapOf (Elements) {\n      let ElementList = Elements.split(',')\n      let Result = Object.create(null)\n        for (let i = 0, l = ElementList.length; i < l; i++) {\n          Result[ElementList[i]] = true\n        }\n      return Result\n    }\n\n  /**** maps with the names of tags and attributes with a specific characteristic ****/\n\n    const isEmptyElement = MapOf(\n      'area,base,basefont,br,col,embed,frame,hr,img,isIndex,keygen,link,' +\n      'meta,param,source,track,wbr'                           // without \"input\"\n    )\n\n    const isBlockElement = MapOf(\n      'address,article,aside,audio,blockquote,canvas,center,dd,dir,div,dl,dt,' +\n      'fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,' +\n      'hgroup,hr,ins,isIndex,li,main,menu,nav,noframes,noscript,ol,output,p,pre,' +\n      'section,table,tbody,td,tfoot,th,thead,tr,ul,video'\n    )\n\n    const isInlineElement = MapOf(\n      'a,abbr,acronym,Applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,' +\n      'font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,' +\n      'small,span,strike,strong,sub,sup,textarea,tt,u,var'\n    )\n\n    const isSelfClosingElement = MapOf(\n      'area,base,basefont,bgsound,br,col,colgroup,dd,dt,embed,frame,hr,img,' +\n      'input,isIndex,keygen,li,link,menuitem,meta,options,p,param,source,td,' +\n      'tfoot,th,thead,tr,track,wbr'\n    )\n\n    const isSpecialElement = MapOf(\n      'script,style' + ',preprocessor,business-logic'\n    )\n\n    const isKeywordAttribute = MapOf(\n      'checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,' +\n      'noshade,nowrap,readonly,selected'\n    )\n\n  /**** actual HTML parser ****/\n\n    let doNothing = function () {}\n\n    let processStartTag = Callbacks.processStartTag || doNothing\n    let processEndTag   = Callbacks.processEndTag   || doNothing\n    let processText     = Callbacks.processText     || doNothing\n    let processComment  = Callbacks.processComment  || doNothing\n\n    let Stack = []             // Stack with tag names of unclosed HTML elements\n      Stack.last = function last () { return this[this.length-1] }\n\n    function parseStartTag (_, TagName, rest, isUnary = false) {\n      TagName = TagName.toLowerCase()\n\n      if (isBlockElement[TagName]) {            // close pending inline elements\n        while ((Stack.last() != null) && isInlineElement[Stack.last()]) {\n          parseEndTag('', Stack.last())\n        }\n      }\n\n      if (isSelfClosingElement[TagName] && (Stack.last() === TagName)) {\n        parseEndTag('', TagName)\n      }\n\n      isUnary = isEmptyElement[TagName] || !!isUnary\n      if (! isUnary) { Stack.push(TagName) }\n\n      if (processStartTag !== doNothing) {\n        let Attributes = []\n          rest.replace(AttributePattern, function(Match, AttributeName) {\n            let AttributeValue = (arguments[2] ? arguments[2] :\n              (arguments[3] ? arguments[3] :\n                (arguments[4] ? arguments[4] :\n                  (isKeywordAttribute[AttributeName] ? AttributeName : ''))))\n            Attributes.push({\n              Name:AttributeName, Value:AttributeValue,\n              escapedValue:AttributeValue.replace(/(^|[^\\\\])\"/g, '$1\\\\\\\"')\n            })\n            return ''\n          })\n        processStartTag(\n          TagName, Attributes, isUnary, (Stack.length === (isUnary ? 0 : 1))\n        )\n      }\n\n      return ''\n    }\n\n    function parseEndTag (_, TagName) {\n      let Position                  // how many open elements have to be closed?\n      if (TagName == null) {\n        Position = 0\n      } else {\n        TagName = TagName.toLowerCase()\n\n        for (Position = Stack.length-1; Position >= 0; Position--) {\n          if (Stack[Position] === TagName) { break }\n        }\n      }\n\n      if (Position >= 0) {\n        for (let i = Stack.length-1; i >= Position; i--) {\n          processEndTag(Stack[i], (i === 0))\n        }\n        Stack.length = Position\n      }\n\n      return ''\n    }\n\n    let lastHTMLContent = HTML\n    while (HTML !== '') {\n      let inText = true\n\n      if ((Stack.last() == null) || ! isSpecialElement[Stack.last()]) {\n        if (HTML.startsWith('<!--')) {                           // HTML comment\n          let Index = HTML.indexOf('-->',4)\n          if (Index > 0) {\n            processComment(HTML.slice(4,Index))\n            HTML    = HTML.slice(Index + 3)\n            inText = false\n          }\n        } else if (HTML.startsWith('</')) {                      // HTML end tag\n          let Match = HTML.match(EndTagPattern)\n          if (Match != null) {\n            HTML = HTML.slice(Match[0].length)\n            Match[0].replace(EndTagPattern, parseEndTag);// for side effects\n            inText = false\n          }\n        } else if (HTML.startsWith('<')) {                     // HTML start tag\n          let Match = HTML.match(StartTagPattern)\n          if (Match != null) {\n            HTML = HTML.slice(Match[0].length)\n            Match[0].replace(StartTagPattern, parseStartTag);// for side effects\n            inText = false\n          }\n        }\n\n        if (inText) {\n          let Index = HTML.indexOf('<')\n\n          let Text = (Index < 0 ? HTML : HTML.slice(0,Index))\n          HTML     = (Index < 0 ? ''   : HTML.slice(Index))\n\n          processText(Text, Stack.length === 0)\n        }\n      } else {\n        HTML = HTML.replace(\n          new RegExp('^((?:.|\\n)*?)<\\/' + Stack.last() + '[^>]*>','i'),\n          function (_, Text) {\n            Text = Text\n              .replace(/<!--(.*?)-->/g, '$1')\n              .replace(/<!\\[CDATA\\[(.*?)]]>/g, '$1')\n            processText(Text, Stack.length === 0)\n            return ''\n          }\n        )\n        parseEndTag('', Stack.last())\n      }\n\n      if (HTML === lastHTMLContent) {\n        switch (true) {\n          case HTML.startsWith('<'):\n            HTML = HTML.slice(1)\n            processText('&lt;', Stack.length === 0)\n            break\n          default:\n            throw new Error('HTMLParseError: could not parse \"' + HTML + '\"')\n        }\n      }\n      lastHTMLContent = HTML\n    }\n    parseEndTag()\n  }\n\n/**** AttributeFrom ****/\n\n  function AttributeFrom (AttributeName, Attributes) {\n    for (let i = 0, l = Attributes.length; i < l; i++) {\n      let Attribute = Attributes[i]\n      if (Attribute.Name === AttributeName) { return Attribute.Value }\n    }\n    return undefined\n  }\n\n/**** deserializedTag ****/\n\n  function deserializedTag (TagName, Attributes, isUnary) {\n    let Result = '<' + TagName\n      for (let i = 0, l = Attributes.length; i < l; i++) {\n        let Attribute = Attributes[i]\n        Result += ' ' + Attribute.Name + '=\"' + Attribute.escapedValue + '\"'\n      }\n    return Result + (isUnary ? '/>' : '>')\n  }\n\n/**** finally run the desired search ****/\n\n  try {\n    let Response = await axios.get('https://www.startpage.com/do/dsearch',{\n      params:{\n        query:SearchString, language:Language,\n        cat:'web', pl:'ext-chrome', extVersion:'1.1.2'\n      },\n      headers: {\n        'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36'\n      },\n      responseType:'text'\n    })\n\n    switch (Response.status) {\n      case 200:\n        msg.statusCode = 200\n        msg.payload    = ResultsFrom(Response.data,Language)\n        break\n      case 204:\n        msg.statusCode = 204\n        msg.payload    = []\n        break\n      default:\n        msg.statusCode = Response.status\n        msg.payload    = Response.statusText\n    }\n  } catch (Signal) {\n    msg.statusCode = 500\n    msg.payload    = Signal + ''\n  }\n\n  node.send([msg,null])\n})()\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "child_process",
                "module": "child_process"
            },
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "f34f28fb6e23fdae"
            ],
            [
                "7865fc1b755e93af"
            ]
        ]
    },
    {
        "id": "7865fc1b755e93af",
        "type": "reusable-out",
        "z": "b51de224d58a5b6a",
        "name": "failure",
        "position": "2",
        "x": 450,
        "y": 200,
        "wires": []
    }
]
